{"ast":null,"code":"var _jsxFileName = \"C:\\\\episode1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [count, seCount] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [planets.map((planet, key) => {\n      if (planet.isGasPlanet) return /*#__PURE__*/_jsxDEV(Planet, {\n        name: planet.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 40\n      }, this);\n    }), planets.map((planet, key) => !planet.isGasPlanet && /*#__PURE__*/_jsxDEV(Planet, {\n      name: planet.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 60\n    }, this)), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"H50SFkFL0pewzhj6avhJWIsjg/k=\");\n_c = App;\nconst Planet = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Planet;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Planet\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","count","seCount","className","children","planets","map","planet","key","isGasPlanet","Planet","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","props","_c2","$RefreshReg$"],"sources":["C:/episode1/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [count, seCount] = useState(0);\n  return (\n    <div className=\"App\">\n      {planets.map((planet, key) => {\n        if (planet.isGasPlanet) return <Planet name={planet.name}  />;\n      })}\n      {planets.map((planet, key) => !planet.isGasPlanet && <Planet name={planet.name}  />\n      )};\n    </div>\n  );\n}\n\nconst Planet = (props) => {\n  return (\n    <div>\n      <h1>{props.name}</h1>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACpC,oBACEE,OAAA;IAAKK,SAAS,EAAC,KAAK;IAAAC,QAAA,GACjBC,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;MAC5B,IAAID,MAAM,CAACE,WAAW,EAAE,oBAAOX,OAAA,CAACY,MAAM;QAACC,IAAI,EAAEJ,MAAM,CAACI;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAC/D,CAAC,CAAC,EACDV,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK,CAACD,MAAM,CAACE,WAAW,iBAAIX,OAAA,CAACY,MAAM;MAACC,IAAI,EAAEJ,MAAM,CAACI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAClF,CAAC,EAAC,GACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEV;AAACf,EAAA,CAXQD,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AAaZ,MAAMW,MAAM,GAAIO,KAAK,IAAK;EACxB,oBACEnB,OAAA;IAAAM,QAAA,eACEN,OAAA;MAAAM,QAAA,EAAKa,KAAK,CAACN;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV,CAAC;AAAAG,GAAA,GANKR,MAAM;AAQZ,eAAeX,GAAG;AAAC,IAAAiB,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}